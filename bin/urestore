set -o posix

# Todo
#  Error handling when a backup is ongoing and no restore can be done
#  Don't display "skipping non-regular file ..."
#  Handle permission errors better

check () {
	ssh -p $SSH_PORT $REMOTE_HOST ls $BACKUP_PATH >/dev/null 2>/dev/null
	echo $?
}

list () {
	echo "Running list";
	ssh -p $SSH_PORT $REMOTE_HOST "(
	cd $BACKUPS_PATH
	for i in */$LOCAL_PATH; do
		echo "'$i'" | sed 's/\// /' | awk '{ print "'$1'" }' | sed 's/[a-z]*\_//'
	done)" 2>/dev/null
	if [ $? -ne 0 ]; then
		echo "error while checking for backup"
		exit 1
	fi
}

restore () {
	if [ `check` -ne 0 ]; then
		echo "no backup found for this date" 1>&2
		exit 1
	fi

	echo "Restore from ${HOSTNAME} at ${TIME}"

	rsync -Ouaz${VERBOSE} \
	-e "ssh -p $SSH_PORT" \
	--include "$EXPRESSION" \
	--include "- *" \
	$REMOTE_HOST:$REMOTE_PATH/ $LOCAL_PATH/ 2>/dev/null
	if [ $? -ne 0 -a $? -ne 23 ]; then
		echo "something went wrong, error $?" 1>&2
		exit 1
	fi
}

diff () {
	if [ `check` -ne 0 ]; then
		echo "no backup found for this date" 1>&2
		exit 1
	fi

	echo "Diff against ${HOSTNAME} at ${TIME}"

	rsync -Onuaz \
	-e "ssh -p $SSH_PORT" \
	--out-format="%n" \
	--include "$EXPRESSION" \
	--include "- *" \
	$REMOTE_HOST:$REMOTE_PATH/ $LOCAL_PATH/ 2>/dev/null
	if [ $? -ne 0 -a $? -ne 23 ]; then
		echo "Something went wrong, error $?" 1>&2
		exit 1
	fi
}

set_var () {
	if [ $TIME -eq 0 ]; then
		TIME=`list|tail -n 1`
	fi


	BACKUP_PATH="$BACKUPS_PATH/${HOSTNAME}_${TIME}"
	REMOTE_PATH="$BACKUP_PATH/$LOCAL_PATH"

}

usage () {
	cat << __EOT
Usage: `basename $0` action [-t time] [-x expression] [-v]
Actions: -r			Restore from backup
         -d 			Difference from backup
	 -l			List backups of this directory
	 -c			Check to see if there is a backup for this dir and date
	 -h			Shows this help
Options: -t  TIME 		Time in the past, list times with -l
         -x  EXPRESSION		Only include files matching EXPRESSION
	 -n  MACHINE		Override hostname for the machine to recover from
	 -v 			Verbose output
__EOT
}

HOSTNAME=`hostname -s`
LOCAL_PATH=`readlink -f $PWD`
TIME=0
BACKUPS_PATH=""
BACKUP_PATH=""
REMOTE_PATH=""
REMOTE_HOST=""
SSH_PORT=22
EXPRESSION='+ *'
VERBOSE=""
rflag=0
dflag=0
vflag=0
lflag=0
cflag=0


while getopts "rdclt:n:x:vh" opt; do
	case $opt in
	r)	rflag=1 ;;
	d)	dflag=1 ;;
	c)      cflag=1 ;;
	n)	HOSTNAME=${OPTARG} ;;
	l)	lflag=1 ;;
	v)	VERBOSE="v" ;;
	t)	TIME=${OPTARG}  ;;
	x)	EXPRESSION=${OPTARG} ;;
	h)	usage ;;
	*)	usage ;;
	esac
done

case $HOSTNAME in
	beaver)	SSH_PORT=2020 ;;
	phoo)	SSH_PORT=2030 ;;
esac

REMOTE_HOST=${HOSTNAME}backup.starkast.net
BACKUPS_PATH="/snapshots"

if [ $# -eq 0 ]; then
	usage
fi

[ $rflag -eq 1 ] && set_var && restore && exit
[ $dflag -eq 1 ] && set_var && diff && exit
[ $lflag -eq 1 ] && list && exit
[ $cflag -eq 1 ] && set_var && check && exit
